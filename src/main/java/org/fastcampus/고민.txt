

1. JPA를 이용할 경우 얻을 수 있는 이점.

2. JPA를 적용해야 하는 프로젝트와 SQL을 직접 사용해야하는 프로젝트의 차이점

3.  객체에 @Entity 어노테이션을 붙여 객체를 만드는게 좋을지, 아니면 따로 ~~Entitiy 객체를 만들어 분리하는 것이 좋을지

    User 객체에 @Entity를 붙여서 사용할 수도 있고, UserEntity 객체를 만들어 분리해서 사용하는 방법도 있음.
    UserEntity 객체로 분리해 사용하게 된다면 관리할 객체가 늘어나는 것이 단점이지만, DB와 비즈니스 로직의 완전한 분리가 가능해진다는 장점이 있음.
    분리없이 사용한다면 기능의 추가에 따라 비즈니스 로직과 상관없는 것들이 엔티티에 추가될 수 있음.


--------------------------------------------------------------------------------------------------------------

Entity를 만든 후, 데이터를 저장하고 조회하는 로직을 위한 레포지토리 작성.
총 3가지 방법으로 해보려고 함.

1. Spring Data JPA의 Query Method 기능을 활용
2. JPQL 사용
3. QueryDSL 사용


--------------------------------------------------------------------------------------------------------------
Ch05-09
서비스 API 구현

UseCase를 구현하기 위해 기능들을 API로 만들려 함.
유저 생성, 팔로우, 팔로우 취소, 유저 정보, 팔로워 유저 리스트, 팔로잉 유저 리스트

먼저 Controller 작성 (user - ui - UserController)

--------------------------------------------------------------------------------------------------------------
Ch05-11
피드 조회 기능

내가 팔로우하는 유저의 글의 목록을 볼 수 있어야함.
매번 조회마다 내가 팔로우하는 유저를 조회하고 글을 조회하고, 조합하고 반환하는 것은 성능, 기능적으로 어려움.
따라서 이걸 해결하기 위해 테이블에 유저별로 게시글 리스트를 만듬.

USER ID / POST ID / AUTHOR_ID 으로 구성

1) 만약 1 -> 2 , 1 -> 3을 팔로우하고,
2) 2번 user가 글을 작성(post id = 1),
3) 3번 user가 글을 작성한다 가정(post id = 2).

4) 이후 1번 유저가 글을 작성한다 가정(post id = 3).
    이때 4번의 과정은 UserPostQueue에 들어가지 않음( 1번 유저를 팔로우하는 유저가 없기 때문이다 )

그럼 UserPostQueue에는 다음과 같이 값이 들어감.
USER ID / POST ID / AUTHOR_ID
   1    /    1    /     2
   1    /    2    /     3

포스트, 유저별로 앞의 유저의 큐 형식으로 프스트가 쌓이는 형식으로 db 테이블을 만들 예정.

UserPostQueueEntity
JpaUserPostQueueRepository

CommandRepository - UserPostQueue에 데이터를 넣어주는 역할.
QueryRepository - UserPostQueue의 데이터를 조회하는 역할.


feedlist를 기준으로 Comment 리스트를 가져오는것도 한번 구현해보자

--------------------------------------------------------------------------------------------------------------
Ch05-13
동시성 문제 해결

지금까지의 코드는 동일한 게시글에 여러 유저가 동시에 좋아요를 누르게 되면 2번의 업데이트가 일어나지만 1만 증가됨.
    데이터를 불러오는 시점과 업데이트 시점이 다르기 때문.
    데이터를 거의 동시에 불러오기 때문에 발생하는 문제임.

이를 업데이트 로스트, 갱신 유실 현상 이라고 함.

이 문제를 어떻게 해결할 수 있을까?

JpaPostRepository의 CommentIncreaseCount 랑 함께 보기







